name: Build and Deploy Backend

on:
  push:
    branches: [main]

env:
  DOCKERHUB_REPO: millionmulugeta/remi_server
  SERVER_DIR: /home/million/mrbeas/
  COMPOSE_PROJECT_NAME: remi_backend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          VERSION=latest
          echo "Building version $VERSION"
          
          # Build from the root (where Dockerfile should be)
          docker build -t $DOCKERHUB_REPO:$VERSION .
          docker push $DOCKERHUB_REPO:$VERSION
          
          # Tag as latest
          docker tag $DOCKERHUB_REPO:$VERSION $DOCKERHUB_REPO:latest
          docker push $DOCKERHUB_REPO:latest
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy to Server
        env:
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            
            # Navigate to the absolute path where docker-compose.yml is located
            cd /home/million/mrbeas  # Using the absolute path here
            
            # Print the directory contents for debugging
            echo "Directory contents:"
            ls -la
            
            # Ensure docker-compose.yml exists in the correct directory
            if [ ! -f "docker-compose.yml" ]; then
              echo "docker-compose.yml not found in /home/million/mrbeas!"
              exit 1
            else
              echo "docker-compose.yml found!"
            fi

            # Remove all existing Docker images only if images exist
            echo "Removing all existing Docker images..."
            EXISTING_IMAGES=$(docker images -q)
            if [ -n "$EXISTING_IMAGES" ]; then
              docker rmi $EXISTING_IMAGES || true
            else
              echo "No Docker images found to remove."
            fi

            # Pull the latest image
            echo "Pulling the latest image..."
            docker pull $DOCKERHUB_REPO:latest || true

            # Stop and restart containers using docker-compose
            echo "Stopping and restarting containers..."
            docker-compose down || true
            docker-compose up -d
            
            # Ensure that the services are up and running
            docker ps

            # Cleanup
            docker image prune -af
          EOF
