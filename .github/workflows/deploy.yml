name: Build and Deploy Backend

on:
  push:
    branches: [main]

env:
  DOCKERHUB_REPO: millionmulugeta/remi_server
  LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          VERSION=1.0.${{ github.run_number }}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          docker build -t $DOCKERHUB_REPO:$VERSION -t $DOCKERHUB_REPO:latest .
          docker push $DOCKERHUB_REPO:$VERSION
          docker push $DOCKERHUB_REPO:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Prepare deployment files
        run: |
          # Create .env file
          cat << 'EOF' > .env
          # Firebase Configuration
          FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_PRIVATE_KEY='${{ secrets.FIREBASE_PRIVATE_KEY }}'
          FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
          FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }}

          # Application Secrets
          KONTIGO_API_KEY=${{ secrets.KONTIGO_API_KEY }}
          PRE_FUNDED_ACCOUNT_ID=${{ secrets.PRE_FUNDED_ACCOUNT_ID }}
          ORGANIZATION_ID=${{ secrets.ORGANIZATION_ID }}
          EOF

          # Create docker-compose.yml
          cat << EOF > docker-compose.yml
          version: '3.8'
          services:
            remi_server:
              image: ${DOCKERHUB_REPO}:latest
              container_name: remi_server
              restart: unless-stopped
              env_file: .env
              environment:
                - VIRTUAL_HOST=backend.mrbeas.net
                - VIRTUAL_PORT=3000
                - LETSENCRYPT_HOST=backend.mrbeas.net
                - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
              volumes:
                - ./remi_Backend:/app
                - /app/node_modules
              networks:
                - proxy-network

            nginx-proxy:
              image: nginxproxy/nginx-proxy
              container_name: nginx-proxy
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - certs:/etc/nginx/certs
                - vhost:/etc/nginx/vhost.d
                - html:/usr/share/nginx/html
                - /var/run/docker.sock:/tmp/docker.sock:ro
              networks:
                - proxy-network

            nginx-letsencrypt:
              image: nginxproxy/acme-companion
              container_name: nginx-letsencrypt
              volumes:
                - certs:/etc/nginx/certs
                - vhost:/etc/nginx/vhost.d
                - html:/usr/share/nginx/html
                - /var/run/docker.sock:/var/run/docker.sock:ro
              environment:
                - DEFAULT_EMAIL=${LETSENCRYPT_EMAIL}
              depends_on:
                - nginx-proxy
              networks:
                - proxy-network

          volumes:
            certs:
            vhost:
            html:

          networks:
            proxy-network:
              driver: bridge
          EOF

      - name: Transfer files to server
        env:
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
            "mkdir -p ~/mrbeas/remi_Backend"
          
          sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no \
            docker-compose.yml .env \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/mrbeas/
          
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} \
            "chmod 644 ~/mrbeas/.env ~/mrbeas/docker-compose.yml"

      - name: Execute deployment
        env:
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          DOCKERHUB_REPO: ${{ env.DOCKERHUB_REPO }}
          LETSENCRYPT_EMAIL: ${{ env.LETSENCRYPT_EMAIL }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -tt \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'ENDSSH'
            cd ~/mrbeas
            
            # Verify files exist
            echo "=== Deployment Files ==="
            ls -la
            echo "=== .env (sanitized) ==="
            cat .env | grep -v KEY
            echo "========================"
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # Full cleanup
            echo "=== Cleaning Up ==="
            docker-compose down -v --remove-orphans || true
            docker system prune -af || true
            
            # Start services
            echo "=== Starting Services ==="
            export DOCKERHUB_REPO=$DOCKERHUB_REPO
            export LETSENCRYPT_EMAIL=$LETSENCRYPT_EMAIL
            docker-compose up -d --force-recreate
            
            # Verify deployment
            echo "=== Deployment Status ==="
            echo "Containers:"
            docker ps -a
            echo "\nBackend Logs:"
            docker logs remi_server --tail 20 || echo "Waiting for container to start..."
            
            # Internal health check
            echo "\n=== Service Verification ==="
            echo "Container Status:"
            docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            echo "\nNginx Proxy Config:"
            docker exec nginx-proxy cat /etc/nginx/conf.d/default.conf | grep -A 10 "backend.mrbeas.net" || echo "No proxy config found"
            
            echo "\nBackend Health Check:"
            docker exec remi_server curl -s http://localhost:3000/health || \
              docker exec remi_server curl -s http://localhost/api/health || \
              echo "Health check failed"
            
            echo "\nSSL Certificate:"
            docker exec nginx-letsencrypt ls -la /etc/nginx/certs/backend.mrbeas.net* || \
              echo "No SSL certificates found"
            
            exit
          ENDSSH
