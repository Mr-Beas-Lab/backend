name: Build and Deploy Backend

on:
  push:
    branches: [main]

env:
  DOCKERHUB_REPO: millionmulugeta/remi_server
  LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          VERSION=1.0.${{ github.run_number }}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          docker build -t $DOCKERHUB_REPO:$VERSION -t $DOCKERHUB_REPO:latest .
          docker push $DOCKERHUB_REPO:$VERSION
          docker push $DOCKERHUB_REPO:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Prepare deployment files
        run: |
          # Create .env file
          cat << 'EOF' > .env
          FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_PRIVATE_KEY='${{ secrets.FIREBASE_PRIVATE_KEY }}'
          KONTIGO_API_KEY=${{ secrets.KONTIGO_API_KEY }}
          EOF

          # Create docker-compose.yml
          cat << EOF > docker-compose.yml
          version: '3.8'
          services:
            remi_server:
              image: ${DOCKERHUB_REPO}:latest
              container_name: remi_server
              restart: unless-stopped
              env_file: .env
              environment:
                - VIRTUAL_HOST=backend.mrbeas.net
                - VIRTUAL_PORT=3000
                - LETSENCRYPT_HOST=backend.mrbeas.net
                - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
              volumes:
                - ./remi_Backend:/app
                - /app/node_modules
              networks:
                - proxy-network

            nginx-proxy:
              image: nginxproxy/nginx-proxy:alpine
              container_name: nginx-proxy
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - certs:/etc/nginx/certs
                - vhost:/etc/nginx/vhost.d
                - html:/usr/share/nginx/html
                - /var/run/docker.sock:/tmp/docker.sock:ro
              networks:
                - proxy-network

            nginx-letsencrypt:
              image: nginxproxy/acme-companion:latest
              container_name: nginx-letsencrypt
              volumes:
                - certs:/etc/nginx/certs
                - vhost:/etc/nginx/vhost.d
                - html:/usr/share/nginx/html
                - /var/run/docker.sock:/var/run/docker.sock:ro
              environment:
                - DEFAULT_EMAIL=${LETSENCRYPT_EMAIL}
              depends_on:
                - nginx-proxy
              networks:
                - proxy-network

          volumes:
            certs:
            vhost:
            html:

          networks:
            proxy-network:
              driver: bridge
          EOF

      - name: Transfer files to server
        env:
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          SUDO_PASSWORD: ${{ secrets.SUDO_PASSWORD }}  # Add this to GitHub secrets
        run: |
          # Transfer files first
          sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no \
            docker-compose.yml .env \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/mrbeas/

          # Install Docker Compose v2 using SSH with sudo
          sshpass -p "$SERVER_PASSWORD" ssh -tt \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'ENDSSH'
            echo "$SUDO_PASSWORD" | sudo -S apt-get update
            echo "$SUDO_PASSWORD" | sudo -S apt-get install -y docker-ce docker-ce-cli containerd.io
            echo "$SUDO_PASSWORD" | sudo -S curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            echo "$SUDO_PASSWORD" | sudo -S chmod +x /usr/local/bin/docker-compose
            exit
          ENDSSH

      - name: Execute deployment
        env:
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          DOCKERHUB_REPO: ${{ env.DOCKERHUB_REPO }}
          LETSENCRYPT_EMAIL: ${{ env.LETSENCRYPT_EMAIL }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -tt \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'ENDSSH'
            cd ~/mrbeas
            
            # Full cleanup
            echo "=== Performing Full Cleanup ==="
            docker rm -f $(docker ps -aq) || true
            docker volume rm -f $(docker volume ls -q) || true
            docker network prune -f || true
            
            # Pull fresh images
            echo "=== Pulling Fresh Images ==="
            docker pull ${DOCKERHUB_REPO}:latest
            docker pull nginxproxy/nginx-proxy:alpine
            docker pull nginxproxy/acme-companion:latest
            
            # Start services with Docker Compose v2
            echo "=== Starting Services ==="
            /usr/local/bin/docker-compose -f docker-compose.yml up -d --force-recreate
            
            # Wait for services to initialize
            sleep 15
            
            # Verify deployment
            echo "\n=== Deployment Verification ==="
            echo "Container Status:"
            docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            echo "\nNginx Proxy Logs:"
            docker logs nginx-proxy --tail 20
            
            echo "\nLet's Encrypt Logs:"
            docker logs nginx-letsencrypt --tail 20
            
            echo "\nBackend Logs:"
            docker logs remi_server --tail 20 || echo "Backend not running yet"
            
            echo "\nSSL Certificate Status:"
            docker exec nginx-letsencrypt ls -la /etc/nginx/certs || echo "SSL setup not complete"
            
            echo "\nTesting Backend Connectivity:"
            docker exec remi_server curl -I http://localhost:3000 || \
              docker exec remi_server curl -I http://localhost || \
              echo "Backend not responding"
            
            exit
          ENDSSH
