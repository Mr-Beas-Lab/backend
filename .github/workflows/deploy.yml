name: Build and Deploy Backend

on:
  push:
    branches: [main]

env:
  DOCKERHUB_REPO: millionmulugeta/remi_server
  LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          VERSION=1.0.${{ github.run_number }}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          docker build -t $DOCKERHUB_REPO:$VERSION -t $DOCKERHUB_REPO:latest .
          docker push $DOCKERHUB_REPO:$VERSION
          docker push $DOCKERHUB_REPO:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Prepare deployment files
        run: |
          cat << EOF > docker-compose.yml
          version: '3.8'
          services:
            remi_server:
              image: $DOCKERHUB_REPO:latest
              container_name: remi_server
              restart: unless-stopped
              env_file:
                - .env
              environment:
                - NODE_ENV=production
              volumes:
                - ./remi_Backend:/app
                - /app/node_modules
              networks:
                - proxy-network

            nginx-proxy:
              image: nginxproxy/nginx-proxy
              container_name: nginx-proxy
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - certs:/etc/nginx/certs
                - vhost:/etc/nginx/vhost.d
                - html:/usr/share/nginx/html
                - /var/run/docker.sock:/tmp/docker.sock:ro
              networks:
                - proxy-network

            nginx-letsencrypt:
              image: nginxproxy/acme-companion
              container_name: nginx-letsencrypt
              volumes:
                - certs:/etc/nginx/certs
                - vhost:/etc/nginx/vhost.d
                - html:/usr/share/nginx/html
                - /var/run/docker.sock:/var/run/docker.sock:ro
              environment:
                - DEFAULT_EMAIL=millionmulugeta01@gmail.com
              depends_on:
                - nginx-proxy
              networks:
                - proxy-network

          volumes:
            certs:
            vhost:
            html:

          networks:
            proxy-network:
              driver: bridge
          EOF

      - name: Transfer files to server
        env:
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no \
            docker-compose.yml \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/mrbeas/

      - name: Execute deployment
        env:
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -tt \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'ENDSSH'
            cd ~/mrbeas
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # Force remove old containers
            docker rm -f remi_server nginx-proxy nginx-letsencrypt || true
            
            # Remove old volumes and networks
            docker volume rm -f mrbeas_certs mrbeas_vhost mrbeas_html || true
            docker network rm -f mrbeas_proxy-network || true
            
            # Pull the new image
            docker pull $DOCKERHUB_REPO:$VERSION || echo "Continuing with existing image"
            
            # Start new containers
            docker-compose up -d --force-recreate
            
            # Verify deployment
            echo "Current containers:"
            docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}"
            exit
          ENDSSH
